{"version":3,"sources":["logo.svg","reviews.js","App.js","reportWebVitals.js","index.js"],"names":["Review","review","setRatings","ratings","comment","rating","onClick","comment_id","id","fetch","method","headers","body","JSON","stringify","then","response","text","data","alert","filter","App","useState","useEffect","json","console","log","map","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wLAAe,I,kBC8CAA,MA1Cf,YAAkD,IAAhCC,EAA+B,EAA/BA,OAAQC,EAAuB,EAAvBA,WAAYC,EAAW,EAAXA,QAwBlC,OACI,gCACI,0CAAaF,EAAOG,WADxB,KACsC,yCAAYH,EAAOI,UASrD,wBAAQC,QAAS,WAjCzB,IAAqBC,IAiCwBN,EAAOO,GAhChDC,MAAM,QAAS,CACXC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAE3BC,KAAMC,KAAKC,UAAU,CAAEP,iBAExBQ,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAAQF,MAAK,SAAAG,GACtCC,QACAjB,EAAWC,EAAQiB,QAAO,SAAAf,GAAM,OAAIA,EAAOG,KAAOD,UAwBlD,+BCuBGc,MAhDf,WACE,MAA8BC,mBAAS,IAAvC,mBAAOnB,EAAP,KAAgBD,EAAhB,KAiCA,OADAqB,qBAAU,WA5BRd,MAAM,SACHM,MAAK,SAAAC,GAAQ,OAAIA,EAASQ,UAC1BT,MAAK,SAAAG,GACJO,QAAQC,IAAIR,GACZhB,EAAWgB,QAwBc,IAG7B,aADA,CACA,gBAEIf,EAAQwB,KAEN,SAAUtB,GACR,OAAO,cAAC,EAAD,CAAQJ,OAAQI,UCxCpBuB,EAfS,SAAAC,GAElBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.e9a2b5ca.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","/* eslint no-undef: 0, no-unused-expressions: 0*/\n\nimport { notEqual } from \"assert\";\n\nfunction Review({ review, setRatings, ratings }) {\n    // generated when user presses button--tells server to do something and request is handles in routes.py\n    function handleClick(comment_id) {\n        fetch('/rate', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            // creates object comment id\n            body: JSON.stringify({ comment_id })\n\n        }).then(response => response.text()).then(data => {\n            alert()\n            setRatings(ratings.filter(rating => rating.id !== comment_id))\n        })\n    }\n\n    // fetch('/delete',\n    //     {\n    //         method: 'POST',\n    //         headers: { 'Content-Type': 'application/json' },\n    //         // creates object comment id\n    //         body: JSON.stringify(\" \")\n\n    //     }).then(response => response.text())\n\n    return (\n        <div>\n            <p>Reiview: {review.comment}</p>  <p>Rating: {review.rating}</p>\n\n            {/* <button onClick={handleClick => setRatings(ratings)}>\n      Update\n    </button> */}\n\n            {/* // when user clicks call setinput with a new value\n// react re-renders comment component pasing new input to it\n    */}\n            <button onClick={() => { handleClick(review.id) }}>Delete Review</button>\n            {/* <p>{review.comment}</p> */}\n        </div>\n    )\n}\n\n\nexport default Review;","/*eslint no-undef: 0, no-unused-expressions: 0*/\nimport logo from './logo.svg';\nimport './App.css';\n// import useState Hook -- lets us keep local state function component\nimport React, { useState, useEffect } from 'react'\nimport Review from './reviews.js'\n// function Reviews() {\n//   const [ratings, setRatings] = useState(Array(9).fill(null));\n// }\n\n// newSquares[i] = newSquares[i] === null ? currPlayer : newSquares[i];\n// const newWinner = computeWinner(newSquares);\n// setWinner(newWinner);\n// setSquares(newSquares);\nfunction App() {\n  const [ratings, setRatings] = useState([]);\n  //function used to retrieve data from python file\n\n  function getJSON() {\n    fetch('/rate')\n      .then(response => response.json())\n      .then(data => {\n        console.log(data)\n        setRatings(data)\n      });\n    // this.setline(\"Button clicked\");\n    // function deleteReview() {\n    //   fetch('/delete')\n    //     .then(response => response.json())\n    //     .then(data => {\n    //       console.log(data)\n    //       setRatings()\n    //     })\n    // }\n  }\n\n  function saveChanges() {\n    fetch('/save'),\n      {\n        method: 'POST',\n        body: JSON.stringify(ratings),\n      }\n        .then(response => response.json())\n        .then(data => { console.log('Success', data) })\n        .catch((error) => console.log('Error:', error))\n  }\n  // userEffect tells react to do 'something' after every render\n  useEffect(() => { getJSON() }, [])\n  return (\n    // using map func to loop through each 'rating' and assigns delete button from delete function in reviews.js\n    <div>\n      {\n        ratings.map(\n          // anonymous function\n          function (rating) {\n            return <Review review={rating} />\n          }\n        )\n      }\n    </div>\n  );\n}\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n\n    });\n\n  }\n};\n\nexport default reportWebVitals;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}